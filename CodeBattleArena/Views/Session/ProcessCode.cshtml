@model CodeModel

@{
    ViewData["Title"] = "Code Page";
    var defaultCode = @Html.Raw(Json.Serialize(Model.Preparation));

    ViewData["ContainerClasses"] = "container m-0 p-0";

    string themeSite = ViewBag.ThemeSite != null ? ViewBag.ThemeSite : "vs-dark";

    string btnClass = themeSite == "vs-dark" ? "btn-dark" : "btn-light";
    string textClass = themeSite == "vs-dark" ? "text-light" : "text-dark";
    string bgClass = themeSite == "vs-dark" ? "bg-dark" : "bg-light";
}

@if (Model.ExecutionResult != null)
{
    <a class="btn btn-primary mb-2" href="#" data-bs-toggle="modal" data-bs-target="#executionResultModal">Saved results</a>
    <partial name="/Views/Session/_ExecutionResult.cshtml" model="@Model.ExecutionResult" />
}

<div class="row">

    <div id="codeContainer" class="col" style="width: 50vw;">
        <form id="codeForm" method="post" action="/Session/ProcessCode">
            <input type="hidden" asp-for="Preparation" value="@Model.Preparation">
            <input type="hidden" asp-for="Lang" value="@Model.Lang">
            <input type="hidden" id="code" asp-for="Code">
            <div id="formHeader" class="border border-1 rounded-top p-2 mb-0 d-flex justify-content-between">
                <span class="badge btn @btnClass @textClass">@Model.Lang</span>
                <div class="vr mx-2 border border-1"></div>

                <div class="d-flex ms-auto">
                    <a id="svgButtonDefault" class="btn @btnClass badge me-2 @textClass">
                        <svg xmlns="http://www.w3.org/2000/svg" width="1.5em" height="1.5em" fill="currentColor" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M8 3a5 5 0 1 1-4.546 2.914.5.5 0 0 0-.908-.417A6 6 0 1 0 8 2z"></path>
                            <path d="M8 4.466V.534a.25.25 0 0 0-.41-.192L5.23 2.308a.25.25 0 0 0 0 .384l2.36 1.966A.25.25 0 0 0 8 4.466"></path>
                        </svg>
                    </a>

                    <a id="svgButtonSizeCode" class="btn @btnClass badge @textClass">
                        <svg id="svgIconSizeCode" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="1.5em" height="1.5em" fill="currentColor">
                            <path id="iconPathSize" fill-rule="evenodd" d="M6.414 19H10a1 1 0 110 2H4a1 1 0 01-1-1v-6a1 1 0 112 0v3.586l4.293-4.293a1 1 0 011.414 1.414L6.414 19zM17.586 5H14a1 1 0 110-2h6a1 1 0 011 1v6a1 1 0 11-2 0V6.414l-4.293 4.293a1 1 0 01-1.414-1.414L17.586 5z" clip-rule="evenodd"></path>
                        </svg>
                    </a>
                </div>
            </div>
            <div id="containerCodeEditor" class="border border-1" style="height: 65vh;"></div>
            <div id="formFooter" class="border border-1 rounded-bottom d-flex justify-content-between">
                <button class="btn btn-success m-2" type="submit">Sand</button>
            </div>
        </form>
    </div>

    <div id="taskContainer" class="col" style="width: 50vw;">
        <div id="formHeader" class="border border-1 rounded-top p-2 mb-0 d-flex justify-content-between">
            <span class="badge btn @btnClass @textClass">
                @ViewBag.TaskSession.Lang
            </span>
            <div class="vr mx-2 border border-1"></div>
            <span class="badge btn @btnClass @textClass">
                @ViewBag.TaskSession.Difficulty
            </span>

            <div class="d-flex ms-auto">
                <a id="svgButtonSizeTask" class="btn @btnClass badge @textClass">
                    <svg id="svgIconSizeTask" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="1.5em" height="1.5em" fill="currentColor">
                        <path id="iconPathSize" fill-rule="evenodd" d="M6.414 19H10a1 1 0 110 2H4a1 1 0 01-1-1v-6a1 1 0 112 0v3.586l4.293-4.293a1 1 0 011.414 1.414L6.414 19zM17.586 5H14a1 1 0 110-2h6a1 1 0 011 1v6a1 1 0 11-2 0V6.414l-4.293 4.293a1 1 0 01-1.414-1.414L17.586 5z" clip-rule="evenodd"></path>
                    </svg>
                </a>
            </div>
        </div>
        <div id="containerTask" class="border border-1" style="height: 65vh;">
            <textarea class="form-control @bgClass @textClass" readonly style="width: 100%; height: 100%;">@ViewBag.TaskSession.Name

                @ViewBag.TaskSession.TextTask
            </textarea>
        </div>
        <div id="formFooter" class="border border-1 rounded-bottom d-flex justify-content-between pb-5 pt-1">
        </div>
    </div>
    @if (ViewBag.TaskListInputData != null)
    {
        <div class="mt-0">
            <div class="border border-1 rounded p-2 d-flex justify-content-between align-items-center fs-4">
                @foreach (var inputData in ViewBag.TaskListInputData)
                {
                    <div>
                        <span class="badge btn @btnClass @textClass">
                            @inputData.InputData.Data
                        </span>
                        :
                        <span class="badge btn @btnClass @textClass">
                            @inputData.Answer
                        </span>
                    </div>
                }
            </div>
        </div>
    }
</div>



@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/monaco-editor@0.21.2/min/vs/loader.js"></script>
    <script>
        let editor; // Переменная для хранения экземпляра редактора

        let defaulCode = @Html.Raw(Json.Serialize(Model.Preparation));

        let playerCode = @Html.Raw(Json.Serialize(Model.Code));

        let editorValue = playerCode !== null ? playerCode : defaulCode;


        let theme = '@themeSite';

        require.config({ paths: { 'vs': 'https://cdn.jsdelivr.net/npm/monaco-editor@0.21.2/min/vs' } });
        require(['vs/editor/editor.main'], function () {
        editor = monaco.editor.create(document.getElementById('containerCodeEditor'), {
            value: editorValue,
                language: 'csharp',
                theme: theme, // Пример использования тёмной темы
                automaticLayout: true, // Автоматическая подстройка размера редактора
                quickSuggestions: true
            });
            console.log('Editor initialized:', editor); // Проверка инициализации редактора
        });

        let codeContainer = document.getElementById('codeContainer');
        let taskContainer = document.getElementById('taskContainer');

        let svgButtonSizeCode = document.getElementById('svgButtonSizeCode');
        let iconPathSizeCode = document.getElementById('iconPathSizeCode');

        let svgButtonSizeTask = document.getElementById('svgButtonSizeTask');
        let iconPathSizeTask = document.getElementById('iconPathSizeTask');

        let isFullScreen = false;
        let svgButtonDefault = document.getElementById('svgButtonDefault');

        svgButtonDefault.addEventListener('click', function () {
            console.log('Resetting editor value to default');
            editor.setValue(defaulCode);
        });

        let svgIncrease = "M6.414 19H10a1 1 0 110 2H4a1 1 0 01-1-1v-6a1 1 0 112 0v3.586l4.293-4.293a1 1 0 011.414 1.414L6.414 19zM17.586 5H14a1 1 0 110-2h6a1 1 0 011 1v6a1 1 0 11-2 0V6.414l-4.293 4.293a1 1 0 01-1.414-1.414L17.586 5z";
        let svgDecrease = "M7.586 15H4a1 1 0 110-2h6a1 1 0 011 1v6a1 1 0 11-2 0v-3.586l-4.293 4.293a1 1 0 01-1.414-1.414L7.586 15zm8.828-6H20a1 1 0 110 2h-6a1 1 0 01-1-1V4a1 1 0 112 0v3.586l4.293-4.293a1 1 0 111.414 1.414L16.414 9z";

        svgButtonSizeCode.addEventListener('click', function () {
            if (isFullScreen) {
                codeContainer.style.width = "50vw";
                taskContainer.style.display = 'block';
                isFullScreen = false;
            } else {
                taskContainer.style.display = 'none';
                codeContainer.style.width = "calc(100vw)";
                isFullScreen = true;
            }

            if (iconPathSizeCode.getAttribute('d') === svgIncrease) {
                iconPathSizeCode.setAttribute('d', svgDecrease);
            }
            else {
                iconPathSizeCode.setAttribute('d', svgIncrease);
            }
        });

        svgButtonSizeTask.addEventListener('click', function () {
            if (isFullScreen) {
                taskContainer.style.width = "50vw";
                codeContainer.style.display = 'block';
                isFullScreen = false;
            } else {
                codeContainer.style.display = 'none';
                taskContainer.style.width = "calc(100vw)";
                isFullScreen = true;
            }

            if (iconPathSizeTask.getAttribute('d') === svgIncrease) {
                iconPathSizeTask.setAttribute('d', svgDecrease);
            }
            else {
                iconPathSizeTask.setAttribute('d', svgIncrease);
            }
        });

        document.getElementById('codeForm').addEventListener('submit', function (event) {
            event.preventDefault();

            let code = editor.getValue();
            console.log('Form submitted with code:', code);

            document.getElementById('code').value = code; 

            this.submit();
        });

        window.addEventListener('unload', function () {
            let data = new FormData();
            data.append('code', editor.getValue());

            // Использование navigator.sendBeacon для отправки данных на сервер
            navigator.sendBeacon('/Session/SaveCode', data);
        });
    </script>
}
